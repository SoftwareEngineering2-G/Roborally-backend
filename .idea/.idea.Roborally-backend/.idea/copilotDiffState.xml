<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/infrastructure/Roborally.infrastructure.persistence/Lobby/GameLobbyRepository.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/infrastructure/Roborally.infrastructure.persistence/Lobby/GameLobbyRepository.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using Roborally.core.domain.Lobby;&#10;&#10;namespace Roborally.infrastructure.persistence.Lobby;&#10;&#10;public class GameLobbyRepository : IGameLobbyRepository {&#10;    private readonly AppDatabaseContext _context;&#10;&#10;    public GameLobbyRepository(AppDatabaseContext context) {&#10;        _context = context;&#10;    }&#10;&#10;    public Task AddAsync(GameLobby gameLobby, CancellationToken cancellationToken = default) {&#10;        return _context.GameLobby.AddAsync(gameLobby, cancellationToken).AsTask();&#10;    }&#10;&#10;    public async Task&lt;bool&gt; IsUserCurrentlyHostingActiveLobbyAsync(string hostUsername) {&#10;        return await _context.GameLobby&#10;            .AnyAsync(x =&gt; x.HostUsername.ToLower().Equals(hostUsername.ToLower()) &amp;&amp; x.StartedAt == null);&#10;    }&#10;&#10;    public Task&lt;GameLobby?&gt; FindAsync(Guid gameId) {&#10;        return _context.GameLobby.FindAsync(gameId).AsTask();&#10;    }&#10;}" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using Roborally.core.domain.Lobby;&#10;&#10;namespace Roborally.infrastructure.persistence.Lobby;&#10;&#10;public class GameLobbyRepository : IGameLobbyRepository {&#10;    private readonly AppDatabaseContext _context;&#10;&#10;    public GameLobbyRepository(AppDatabaseContext context) {&#10;        _context = context;&#10;    }&#10;&#10;    public Task AddAsync(GameLobby gameLobby, CancellationToken cancellationToken = default) {&#10;        return _context.GameLobby.AddAsync(gameLobby, cancellationToken).AsTask();&#10;    }&#10;&#10;    public async Task&lt;bool&gt; IsUserCurrentlyHostingActiveLobbyAsync(string hostUsername) {&#10;        return await _context.GameLobby&#10;            .AnyAsync(x =&gt; x.HostUsername.ToLower().Equals(hostUsername.ToLower()) &amp;&amp; x.StartedAt == null);&#10;    }&#10;&#10;    public Task&lt;GameLobby?&gt; FindAsync(Guid gameId) {&#10;        return _context.GameLobby.FindAsync(gameId).AsTask();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>