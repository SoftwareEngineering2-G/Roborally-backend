// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Roborally.infrastructure.persistence;

#nullable disable

namespace Roborally.infrastructure.persistence.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20251014172023_GameEvents")]
    partial class GameEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameLobbyJoinedUsers", b =>
                {
                    b.Property<Guid>("GameLobbyGameId")
                        .HasColumnType("uuid");

                    b.Property<string>("JoinedUsersUsername")
                        .HasColumnType("text");

                    b.HasKey("GameLobbyGameId", "JoinedUsersUsername");

                    b.HasIndex("JoinedUsersUsername");

                    b.ToTable("GameLobbyJoinedUsers");
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentRevealedRegister")
                        .HasColumnType("integer");

                    b.Property<string>("GameBoardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HostUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ComplexProperty<Dictionary<string, object>>("CurrentPhase", "Roborally.core.domain.Game.Game.CurrentPhase#GamePhase", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CurrentPhase");
                        });

                    b.HasKey("GameId");

                    b.HasIndex("GameBoardName");

                    b.HasIndex("HostUsername");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Roborally.core.domain.Game.GameEvents.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameEvents", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Gameboard.GameBoard", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Spaces")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("SpaceMatrix");

                    b.HasKey("Name");

                    b.ToTable("Gameboards", (string)null);
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.PlayerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HappenedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "Username");

                    b.ToTable("PlayerEvents", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Player", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("LastExecutedCardName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ComplexProperty<Dictionary<string, object>>("CurrentFacingDirection", "Roborally.core.domain.Game.Player.Player.CurrentFacingDirection#Direction", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("CurrentFacingDirection");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CurrentPosition", "Roborally.core.domain.Game.Player.Player.CurrentPosition#Position", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentPositionX");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentPositionY");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProgrammingDeck", "Roborally.core.domain.Game.Player.Player.ProgrammingDeck#ProgrammingDeck", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DiscardedPiles")
                                .IsRequired()
                                .HasColumnType("json")
                                .HasColumnName("DiscardedPiles");

                            b1.Property<string>("PickPiles")
                                .IsRequired()
                                .HasColumnType("json")
                                .HasColumnName("PickPiles");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Robot", "Roborally.core.domain.Game.Player.Player.Robot#Robot", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Robot");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SpawnPosition", "Roborally.core.domain.Game.Player.Player.SpawnPosition#Position", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("X")
                                .HasColumnType("integer")
                                .HasColumnName("SpawnPositionX");

                            b1.Property<int>("Y")
                                .HasColumnType("integer")
                                .HasColumnName("SpawnPositionY");
                        });

                    b.HasKey("GameId", "Username");

                    b.HasIndex("Username");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Roborally.core.domain.Lobby.GameLobby", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HostUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LobbyName");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GameId");

                    b.HasIndex("HostUsername");

                    b.ToTable("GameLobby", (string)null);
                });

            modelBuilder.Entity("Roborally.core.domain.User.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Roborally.core.domain.Game.GameEvents.BoardElementActivatedEvent", b =>
                {
                    b.HasBaseType("Roborally.core.domain.Game.GameEvents.GameEvent");

                    b.Property<string>("BoardElementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BoardElementActivatedEvents", (string)null);
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.ProgrammingCardsDealtEvent", b =>
                {
                    b.HasBaseType("Roborally.core.domain.Game.Player.Events.PlayerEvent");

                    b.Property<string>("DealtCards")
                        .IsRequired()
                        .HasColumnType("json");

                    b.ToTable("ProgrammingCardsDealtEvents", (string)null);
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.RegistersProgrammedEvent", b =>
                {
                    b.HasBaseType("Roborally.core.domain.Game.Player.Events.PlayerEvent");

                    b.Property<string>("ProgrammedCardsInOrder")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("ProgrammedCardsInOrder");

                    b.ToTable("RegisterProgrammedEvents", (string)null);
                });

            modelBuilder.Entity("GameLobbyJoinedUsers", b =>
                {
                    b.HasOne("Roborally.core.domain.Lobby.GameLobby", null)
                        .WithMany()
                        .HasForeignKey("GameLobbyGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roborally.core.domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("JoinedUsersUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Game", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Gameboard.GameBoard", "GameBoard")
                        .WithMany()
                        .HasForeignKey("GameBoardName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roborally.core.domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("HostUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameBoard");
                });

            modelBuilder.Entity("Roborally.core.domain.Game.GameEvents.GameEvent", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Game", null)
                        .WithMany("GameEvents")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.PlayerEvent", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Player.Player", null)
                        .WithMany("PlayerEvents")
                        .HasForeignKey("GameId", "Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Player", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roborally.core.domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Lobby.GameLobby", b =>
                {
                    b.HasOne("Roborally.core.domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("HostUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.GameEvents.BoardElementActivatedEvent", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.GameEvents.GameEvent", null)
                        .WithOne()
                        .HasForeignKey("Roborally.core.domain.Game.GameEvents.BoardElementActivatedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.ProgrammingCardsDealtEvent", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Player.Events.PlayerEvent", null)
                        .WithOne()
                        .HasForeignKey("Roborally.core.domain.Game.Player.Events.ProgrammingCardsDealtEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Events.RegistersProgrammedEvent", b =>
                {
                    b.HasOne("Roborally.core.domain.Game.Player.Events.PlayerEvent", null)
                        .WithOne()
                        .HasForeignKey("Roborally.core.domain.Game.Player.Events.RegistersProgrammedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Game", b =>
                {
                    b.Navigation("GameEvents");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Roborally.core.domain.Game.Player.Player", b =>
                {
                    b.Navigation("PlayerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
